<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2010 The myBatis Team Licensed under the Apache License, Version 
	2.0 (the "License"); you may not use this file except in compliance with 
	the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
	Unless required by applicable law or agreed to in writing, software distributed 
	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
	OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
	the specific language governing permissions and limitations under the License. -->

<!-- This is a org.mybatis.spring.sample context that shows four different 
	ways to integrate with Spring. FooService* are beans that act as business 
	services. All of the services implement FooService which is annotated as 
	@Transactional. Each one is injected with a mapper coded/created in a different 
	way: userMapperBean is created with a MapperFactoryBean (has no implementation) 
	userMapper is searched and registered by the MapperScannerConfigurer (has 
	no implementation) userMapperDaoSupport extends SqlSessionDaoSupport userMapperSqlSession 
	uses directly MyBatis API (has no transaction support) version: $Id: context.xml 
	2717 2010-10-15 15:37:00Z eduardo.macarron $ -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
	
	<mvc:default-servlet-handler/>
	   <context:component-scan base-package="com.ffcs.atte.**.control" />
	<mvc:annotation-driven />
	
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>   
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>  
	<!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 -->   
    <bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:order="100" p:viewClass="org.springframework.web.servlet.view.JstlView"
		p:prefix="/WEB-INF/views/" p:suffix=".jsp" />
		
	<!-- 根据客户端的不同的请求决定不同的view进行响应, 如 /blog/1.json /blog/1.xml -->
	<!-- <bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		设置为true以忽略对Accept Header的支持,默认为false
		<property name="ignoreAcceptHeader" value="true" />
		在没有扩展名时即: "/user/1" 时的默认展现形式
		<property name="defaultContentType" value="text/html" />

		扩展名至mimeType的映射,即 /user.json => application/json
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
		这里是是否启用扩展名支持，默认就是true
		<property name="favorPathExtension" value="false"></property>
		这里是是否启用参数支持，默认就是true,用于开启 /userinfo/123?format=json 的支持
		<property name="favorParameter" value="true" />
		<property name="viewResolvers">
			<list>
				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="viewClass"
						value="org.springframework.web.servlet.view.JstlView" />
					<property name="prefix" value="/plugins/" />
					<property name="suffix" value=".jsp"></property>
				</bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				for application/json
				<bean
					class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
				for application/xml
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView"> 
					<property name="marshaller">
						<bean class="org.springframework.oxm.xstream.XStreamMarshaller"/> 
					</property> 
				</bean>
			</list>
		</property>
	</bean> -->
	
</beans>
